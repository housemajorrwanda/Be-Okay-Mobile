import React, { useEffect, useState } from "react";
import { Tabs, useSegments } from "expo-router";
import { Text, TouchableOpacity, View } from "react-native";
import { MaterialIcons } from "@expo/vector-icons";

export default function Layout() {
  const [tabVisible, setTabVisible] = useState(false);
  const segments = useSegments();

  useEffect(() => {
    if (segments.length > 0 && segments[segments.length - 1]) {
      setTabVisible(true);
    } else {
      setTabVisible(false);
    }
  }, [segments]);

  const getIconName = (name) => {
    switch (name) {
      case "ActionMenu":
        return "home";
      case "Appointments":
        return "event";
      case "History":
        return "history";
      case "Articles":
        return "article";
      case "Profile":
        return "person";
      default:
        return null;
    }
  };

  return (
    <>
      <Tabs
        tabBar={({ state, navigation, descriptors }) => {
          return (
            <View
              style={{
                display: tabVisible ? "flex" : "none",
                flexDirection: "row",
                justifyContent: "space-between",
                paddingHorizontal: 30,
                paddingVertical: 25,
              }}
            >
              {state.routes.map((route, index) => {
                const { options } = descriptors[route.key];
                const label =
                  options.tabBarLabel !== undefined
                    ? options.tabBarLabel
                    : options.title !== undefined
                    ? options.title
                    : route.name;

                const isFocused = route.name === state.routes[state.index].name;

                const onPress = () => {
                  const event = navigation.emit({
                    type: "tabPress",
                    target: route.key,
                    canPreventDefault: true,
                  });

                  if (!isFocused && !event.defaultPrevented) {
                    navigation.navigate(route.name, route.params);
                  }
                };

                const onLongPress = () => {
                  navigation.emit({
                    type: "tabLongPress",
                    target: route.key,
                  });
                };

                const iconName = getIconName(route.name);

                return (
                  route.name !== "index" && (
                    <TouchableOpacity
                      key={route.key}
                      accessibilityRole="button"
                      accessibilityState={isFocused ? { selected: true } : {}}
                      accessibilityLabel={options.tabBarAccessibilityLabel}
                      testID={options.tabBarTestID}
                      onPress={onPress}
                      onLongPress={onLongPress}
                      style={{
                        justifyContent: "center",
                        alignItems: "center",
                        gap: 2,
                      }}
                    >
                      {iconName && (
                        <MaterialIcons
                          name={iconName}
                          size={24}
                          color={isFocused ? "#673ab7" : "#222"}
                        />
                      )}
                      <Text
                        style={{
                          color: isFocused ? "#673ab7" : "#222",
                        }}
                      >
                        {String(label).slice(0, 8)}
                      </Text>
                    </TouchableOpacity>
                  )
                );
              })}
            </View>
          );
        }}
        screenOptions={{
          tabBarStyle: {
            height: 70,
          },
          tabBarItemStyle: {
            justifyContent: "center",
            alignItems: "center",
            gap: 1,
            flexDirection: "column",
          },
          tabBarIconStyle: {
            padding: 0,
            margin: 0,
          },
          tabBarLabelStyle: {
            padding: 0,
            margin: 0,
          },
        }}
      >
        <Tabs.Screen
          name="index"
          options={{
            headerShown: false,
            tabBarStyle: { display: "none" },
            href: null,
          }}
        />
        <Tabs.Screen
          name="ActionMenu"
          options={{
            headerShown: false,
            tabBarIcon: () => <MaterialIcons name="home" size={24} color="#222" />,
            title: "Home",
          }}
        />
        <Tabs.Screen
          name="Appointments"
          options={{
            headerShown: false,
            tabBarIcon: () => <MaterialIcons name="event" size={24} color="#222" />,
            title: "Appointments",
          }}
        />
        <Tabs.Screen
          name="History"
          options={{
            headerShown: false,
            tabBarIcon: () => <MaterialIcons name="history" size={24} color="#222" />,
            title: "History",
          }}
        />
        <Tabs.Screen
          name="Articles"
          options={{
            headerShown: false,
            tabBarIcon: () => <MaterialIcons name="article" size={24} color="#222" />,
            title: "Articles",
          }}
        />
        <Tabs.Screen
          name="Profile"
          options={{
            headerShown: false,
            tabBarIcon: () => <MaterialIcons name="person" size={24} color="#222" />,
            title: "Profile",
          }}
        />
      </Tabs>
    </>
  );
}
